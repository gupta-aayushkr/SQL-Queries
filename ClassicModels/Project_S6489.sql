--1. Find the top 10 customers who have placed the most orders. Display customer name and the count of orders placed.
select customerName,
sum(case when orders.orderNumber is not null then 1 else 0 end) as Order_count
from customers
join orders on customers.customerNumber = orders.customerNumber
join orderdetails on orderdetails.orderNumber = orders.orderNumber
group by 1
order by 2 desc
limit 10;

--2. Retrieve the list of customers who have placed orders but haven't made any payments yet.
select customers.customerName,
sum(case when checkNumber is not NULL then 1 else 0 end) as Payment_Check
from customers
left join payments on customers.customerNumber = payments.customerNumber
GROUP BY 1
Having Payment_Check = 0
order by 2 desc;

--3. Retrieve a product that has been ordered the least number of times. Display the product code, product name, and the number of times it has been ordered.
select orderdetails.productCode,
products.productName,
count(*) AS Product_Ordered
from orderdetails
join products on orderdetails.productCode = products.productCode
GROUP BY 1
order by 3
limit 1;


-- Classic Models has a product line called "Vintage Cars."
-- The management wants to know the total revenue generated by this product line in the last quarter of the year 2003 (from October to December). 
-- Write a MySQL stored procedure that takes no input parameters and returns total revenue of the "Vintage Cars" product line for the last quarter of 2003.
create procedure GetRevenue()
BEGIN
select sum(quantityOrdered * priceEach) as Vintage_Model_Revenue 
from orders
join orderdetails on orders.orderNumber = orderdetails.orderNumber
join products on products.productCode = orderdetails.productCode
-- where status not in ('Shipped')
where productLine = 'Vintage Cars'
and shippedDate between '2003-10-01' and'2003-12-31';
END;
call GetRevenue;


-- Write an SQL query using CTE's and window functions inside it to retrieve the top 5 customers along with their total order values across all orders.
with cte as (select customerName,sum(orderdetails.quantityOrdered *  orderdetails.priceEach) as Total_Order_Value,
rank() over(order by sum(orderdetails.quantityOrdered *  orderdetails.priceEach) desc) as Total_Order_Value_Ranks from customers
join orders on customers.customerNumber = orders.customerNumber
join orderdetails on orderdetails.orderNumber = orders.orderNumber
GROUP by 1
order by 2 desc
limit 5)
select * from cte;

